jn.define("intranet/statemanager/redux/slices/employees",((e,d,r)=>{const{sliceName:t,userListAdapter:a}=e("intranet/statemanager/redux/slices/employees/meta");const{ReducerRegistry:s}=e("statemanager/redux/reducer-registry");const{createSlice:n}=e("statemanager/redux/toolkit");const{confirmUserRequest:i,deleteInvitation:l,fireEmployee:c,hireEmployee:o,reinvite:p,changeDepartment:u}=e("intranet/statemanager/redux/slices/employees/thunk");const{deleteInvitationPending:m,deleteInvitationFulfilled:g,deleteInvitationRejected:f,fireEmployeePending:y,fireEmployeeFulfilled:C,fireEmployeeRejected:R,hireEmployeePending:x,hireEmployeeFulfilled:U,hireEmployeeRejected:j,confirmUserRequestPending:v,confirmUserRequestFulfilled:E,confirmUserRequestRejected:h,reinvitePending:F,reinviteRejected:I,changeDepartmentPending:P}=e("intranet/statemanager/redux/slices/employees/extra-reducer");const{IntranetUserModel:S}=e("intranet/statemanager/redux/slices/employees/model/user");const q=n({name:t,initialState:a.getInitialState(),reducers:{usersUpserted:{reducer:a.upsertMany,prepare:e=>({payload:e.map((e=>S.prepareReduxUserFromServerUser(e)))})},usersAdded:{reducer:a.addMany,prepare:e=>({payload:e.map((e=>S.prepareReduxUserFromServerUser(e)))})}},extraReducers:e=>{e.addCase(p.pending,F).addCase(p.rejected,I).addCase(l.pending,m).addCase(l.fulfilled,g).addCase(l.rejected,f).addCase(c.pending,y).addCase(c.fulfilled,C).addCase(c.rejected,R).addCase(o.pending,x).addCase(o.fulfilled,U).addCase(o.rejected,j).addCase(i.pending,v).addCase(i.fulfilled,E).addCase(i.rejected,h).addCase(u.pending,P)}});const{reducer:A,actions:M}=q;const{usersUpserted:k,usersAdded:D}=M;s.register(t,A);r.exports={usersUpserted:k,usersAdded:D}}));
//# sourceMappingURL=extension.map.js